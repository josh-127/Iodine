/**
 * Iodine logging module
 * @author GruntTheDivine
 * @module logging
 */

use datetime
use threading

func _default_format_func (severity, time, msg) {
    prefix = {
        LogLevel.DEBUG : "DEBUG ",
        LogLevel.INFO :  "INFO  ",
        LogLevel.WARN :  "WARN  ",
        LogLevel.ERROR : "ERROR ",
        LogLevel.FATAL : "FATAL "
    } [severity]
    
    timestr = "[{}-{:d2}-{:d2}T{:d2}:{:d2}:{:d2}]".format (
        time.year,
        time.month,
        time.day,
        time.hour,
        time.minute,
        time.second
    )    
    return "{} {}--: {}".format (timestr, prefix, msg)
}

func _get_numeric_loglevel (loglevel) {
    return {
        LogLevel.DEBUG : 0,
        LogLevel.INFO :  10,
        LogLevel.WARN :  20,
        LogLevel.ERROR : 30,
        LogLevel.FATAL : 40
    } [loglevel]
}

enum LogLevel {
    DEBUG,
    INFO,
    WARN,
    ERROR,
    FATAL
}

class Logger {
    
    func Logger (self, file) {
        self.format = _default_format_func
        self.mutex = threading.Mutex ()
        self.file = file
        self.setlevel (LogLevel.DEBUG)
    }
    
    /**
     * Sets the minimum severity that will be logged
     * @param loglevel The minimum log level
     */
    func setlevel (self, loglevel) {        
        self._loglevel = _get_numeric_loglevel (loglevel)
    }
    
    /**
     * Logs an informative message
     * @param msg The message to be logged
     */
    func info (self, msg) {
        
        if self._loglevel > 10 {
            return false
        }
        
        now = datetime.now ()
        
        msg = self.format (LogLevel.INFO, now, msg)
        
        self.mutex.synchronize (lambda {
            self.file.writeln (msg)
        })
        
        return true
    }
    
    /**
     * Logs a warning message
     * @param msg The message to be logged
     */
    func warn (self, msg) {

        if self._loglevel > 20 {
            return false
        }
        now = datetime.now ()
        
        msg = self.format (LogLevel.WARN, now, msg)
        
        self.mutex.synchronize (lambda {
            self.file.writeln (msg)
        })
        
        return true
    }    
    
    /**
     * Logs an error message
     * @param msg The message to be logged
     */
    func error (self, msg) {
        if self._loglevel > 30 {
            return false
        }
        
        now = datetime.now ()
        
        msg = self.format (LogLevel.ERROR, now, msg)
        
        self.mutex.synchronize (lambda {
            self.file.writeln (msg)
        })
        
        return true
    }
    
    /**
     * Logs a fatal message
     * @param msg The message to be logged
     */
    func fatal (self, msg) {
        if self._loglevel > 40 {
            return false
        }
        
        now = datetime.now ()
        
        msg = self.format (LogLevel.FATAL, now, msg)
        
        self.mutex.synchronize (lambda {
            self.file.writeln (msg)
        })
        
        return true
    }
}
